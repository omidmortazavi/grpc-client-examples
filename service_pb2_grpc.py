# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class AutomationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.print_method = channel.unary_unary(
                '/distributed_automation.AutomationService/print_method',
                request_serializer=service__pb2.ClientRequest.SerializeToString,
                response_deserializer=service__pb2.ServerResponse.FromString,
                )
        self.get_running_config = channel.unary_unary(
                '/distributed_automation.AutomationService/get_running_config',
                request_serializer=service__pb2.DeviceParameters.SerializeToString,
                response_deserializer=service__pb2.ServerResponse.FromString,
                )
        self.pass_object = channel.unary_unary(
                '/distributed_automation.AutomationService/pass_object',
                request_serializer=service__pb2.ClientRequest.SerializeToString,
                response_deserializer=service__pb2.ServerResponse.FromString,
                )


class AutomationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def print_method(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_running_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pass_object(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutomationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'print_method': grpc.unary_unary_rpc_method_handler(
                    servicer.print_method,
                    request_deserializer=service__pb2.ClientRequest.FromString,
                    response_serializer=service__pb2.ServerResponse.SerializeToString,
            ),
            'get_running_config': grpc.unary_unary_rpc_method_handler(
                    servicer.get_running_config,
                    request_deserializer=service__pb2.DeviceParameters.FromString,
                    response_serializer=service__pb2.ServerResponse.SerializeToString,
            ),
            'pass_object': grpc.unary_unary_rpc_method_handler(
                    servicer.pass_object,
                    request_deserializer=service__pb2.ClientRequest.FromString,
                    response_serializer=service__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_automation.AutomationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutomationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def print_method(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_automation.AutomationService/print_method',
            service__pb2.ClientRequest.SerializeToString,
            service__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_running_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_automation.AutomationService/get_running_config',
            service__pb2.DeviceParameters.SerializeToString,
            service__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pass_object(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_automation.AutomationService/pass_object',
            service__pb2.ClientRequest.SerializeToString,
            service__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
